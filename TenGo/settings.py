"""
Django settings for TenGo project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import environ


from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Calling my environment
env = environ.Env(DEBUG=(bool, True))
env_file = os.path.join(BASE_DIR, ".env")
if os.path.exists(env_file):
    print(f"Loading environment from {env_file}")
    environ.Env.read_env(env_file)
else:
    print("No .env file found!")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Fetch SECRET_KEY
SECRET_KEY = env("SECRET_KEY", default="fallback-secret-key")
print(f"Loaded SECRET_KEY: {SECRET_KEY[:10]}********")  # Print first 10 chars for debugging

# SECURITY WARNING: don't run with debug turned on in production

DEBUG = False

ALLOWED_HOSTS = [
    'tengo.thisisemmanuel.pro',
    'localhost',
    '127.0.0.1',
    '194.61.28.101',
    'tengo.onrender.com',
]
CSRF_TRUSTED_ORIGINS = ['https://tengo.thisisemmanuel.pro', 'https://tengo.onrender.com']

# Application definition

INSTALLED_APPS = [
    'daphne',
    'channels', 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'customer',
    'restaurant',
    'user',
    'delivery',

]

ASGI_APPLICATION = 'TenGo.asgi.application'
REDIS_URL = 'rediss://red-cv538n56l47c73d0495g:GMRJS4viHi53EQYcV21i0GaXlOLUGWhL@oregon-keyvalue.render.com:6379' #need to work on environment variablesYea
from redis import Redis

print(f"Connecting to Redis at: {REDIS_URL}")

try:
    redis = Redis.from_url(REDIS_URL)
    redis.ping()
    print("Connected to Redis successfully!")
except Exception as e:
    print(f"Failed to connect to Redis: {e}")

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [REDIS_URL],
        },
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

ROOT_URLCONF = 'TenGo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TenGo.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
import environ
import os

# Initialize environment variables
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

DATABASES = {
   'default': env.db(),
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
    {'NAME': 'user.validators.CustomPasswordValidator'},
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = 'staticfiles'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'user.User'


LOGIN_REDIRECT_URL = '/home/s'  

LOGIN_URL = '/user/login'

LOGOUT_REDIRECT_URL = '/customer/login'  

AUTHENTICATION_BACKENDS = ['user.backends.EmailBackend']




# -----------------------------------------------------------Using environment variables-----------------------------------------------------------


# BASE_DIR = Path(__file__).resolve().parent.parent

# environ.Env.read_env(env_file=BASE_DIR / '.env')

FLUTTERWAVE_SECRET_KEY = env('FLUTTERWAVE_SECRET_KEY')
FLUTTERWAVE_PUBLIC_KEY = env('FLUTTERWAVE_PUBLIC_KEY')


