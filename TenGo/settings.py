"""
Django settings for TenGo project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import sys
import environ
from redis import Redis

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Calling my environment
env = environ.Env(DEBUG=(bool, True))
env_file = os.path.join(BASE_DIR, ".env")

environ.Env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Fetch SECRET_KEY
SECRET_KEY = env("SECRET_KEY", default="fallback-secret-key")

# SECURITY WARNING: don't run with debug turned on in production
DEBUG = True

ALLOWED_HOSTS = [
    "tengo.thisisemmanuel.pro",
    "localhost",
    "127.0.0.1",
    "194.61.28.101",
    "tengo.onrender.com",
]
CSRF_TRUSTED_ORIGINS = [
    "https://tengo.thisisemmanuel.pro",
    "https://tengo.onrender.com",
]

# Application definition

INSTALLED_APPS = [
    "daphne",
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # "django.contrib.gis",  # Uncomment if using GIS features
    "customer",
    "restaurant",
    "user",
    "delivery",
]

# Redis and Channels configuration
ASGI_APPLICATION = "TenGo.asgi.application"

# For development, we'll disable Redis and use in-memory channel layer
# This avoids connection hanging issues
REDIS_AVAILABLE = False
USE_REDIS = env("USE_REDIS", default="false").lower() == "true"

if USE_REDIS:
    REDIS_URL = env("REDIS_URL", default="redis://localhost:6379/0")
    print(f"üîÑ Attempting to connect to Redis at: {REDIS_URL}")
    
    try:
        # Set a very short timeout for Redis connection test
        redis = Redis.from_url(REDIS_URL, socket_connect_timeout=1, socket_timeout=1)
        redis.ping()
        print("‚úÖ Connected to Redis successfully!")
        REDIS_AVAILABLE = True
    except Exception as e:
        print(f"‚ùå Failed to connect to Redis: {e}")
        print("üîÑ Using in-memory channel layer (WebSockets will still work)")
        REDIS_AVAILABLE = False
else:
    print("üîÑ Redis disabled - using in-memory channel layer for development")

# Channel layers configuration
if REDIS_AVAILABLE and USE_REDIS:
    # Parse Redis URL for channels configuration
    from urllib.parse import urlparse
    redis_parsed = urlparse(REDIS_URL)
    redis_host = redis_parsed.hostname or 'localhost'
    redis_port = redis_parsed.port or 6379
    
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [(redis_host, redis_port)],
            },
        },
    }
    print(f"üì° Using Redis channel layer: {redis_host}:{redis_port}")
else:
    # Use in-memory channel layer for development
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer",
        },
    }
    print("üì° Using in-memory channel layer (development mode)")

# Middleware
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "TenGo.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "TenGo.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Instead of using env.db() which requires DATABASE_URL to be set,
# use explicit database configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("DB_NAME", default="tengo"),
        "USER": env("DB_USER", default="begati"),
        "PASSWORD": env("DB_PASSWORD", default="npg_wip8y5Ivjmen"),
        "HOST": env(
            "DB_HOST", default="ep-raspy-queen-a5gbmwj3-pooler.us-east-2.aws.neon.tech"
        ),
        "PORT": env("DB_PORT", default="5432"),
        "OPTIONS": {
            "sslmode": "require",
        },
        "CONN_MAX_AGE": 60,  # Connection pooling
        "CONN_HEALTH_CHECKS": True,
    }
}

# Caching Configuration
if REDIS_AVAILABLE and USE_REDIS:
    REDIS_URL = env("REDIS_URL", default="redis://localhost:6379/0")
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            },
            'KEY_PREFIX': 'tengo',
            'TIMEOUT': 300,  # 5 minutes default timeout
        }
    }
    # Session configuration to use cache
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'
    print("üíæ Using Redis cache")
else:
    # Fallback to local memory cache for development
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }
    # Use database sessions when Redis is not available
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'
    print("üíæ Using local memory cache")

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
    {"NAME": "user.validators.CustomPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = "staticfiles"

STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media/"

# GDAL Configuration
GDAL_LIBRARY_PATH = "/usr/lib/x86_64-linux-gnu/libgdal.so"
GEOS_LIBRARY_PATH = "/usr/lib/x86_64-linux-gnu/libgeos_c.so"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "user.User"


LOGIN_REDIRECT_URL = "/home/s"

LOGIN_URL = "/user/login"

LOGOUT_REDIRECT_URL = "/customer/login"

AUTHENTICATION_BACKENDS = ["user.backends.EmailBackend"]


# Flutterwave configuration
FLUTTERWAVE_SECRET_KEY = env(
    "FLUTTERWAVE_SECRET_KEY", default="FLWSECK_TESTbd2f68794fab"
)
FLUTTERWAVE_PUBLIC_KEY = env(
    "FLUTTERWAVE_PUBLIC_KEY", default="FLWPUBK_TEST-d4be5c3db5841a342a54464fee0b1b13-X"
)
